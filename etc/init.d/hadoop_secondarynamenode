#!/bin/bash

### BEGIN INIT INFO
# Provides: secondarynamenode
# Required-Start: $local_fs $remote_fs $named $network $portmap
# Required-Stop: $local_fs $remote_fs $network $portmap
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Hadoop Secondary NameNode
# Description: The Hadoop Secondary NameNode stores a copy of the state of the primary NameNode.
### END INIT INFO

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Check if datanode service config exists, if yes, source it
[ -e /etc/sysconfig/hadoop_secondarynamenode ] && . /etc/sysconfig/hadoop_secondarynamenode

# Set OOM_ADJ, if defined
OOM_ADJ=${OOM_ADJ:-0}
HDFS_USER=${HDFS_USER:-hdfs}
HADOOP_PID_DIR=${HADOOP_PID_DIR:-"/var/hadoop/hdfs/run/"}

# Set the ulimit
if [ -n "$NOFILE"  ]
then
    ulimit -n $NOFILE
fi

if [ -n "$NPROC" ]
then
    ulimit -u $NPROC
fi

if [[ "x" == "${JAVA_HOME}x" && -f /etc/profile.d/jdk.sh ]]
then
    source /etc/profile.d/jdk.sh
fi

if [ "x" == "${JAVA_HOME}x" ]
then
    echo "JAVA_HOME not set"
    exit 1
fi

if [ "x" == "${HADOOP_CONF_DIR}x" ]
then
    source /etc/profile.d/hadoop-env.sh
fi

if [ "x" == "${HADOOP_CONF_DIR}x" ]
then
    echo "Hadoop environment not configured"
    exit 1
fi

if [ "x" != "${HDFS_LOG_DIR}x" ]
then
    export HADOOP_LOG_DIR=$HDFS_LOG_DIR
fi

RETVAL=0
# USER is required by hadoop-daemon.sh
export USER=$HDFS_USER
SERVICE="secondarynamenode"
SERVICENAME="SecondaryNameNode"
DESC="Hadoop ${SERVICE} daemon"

PIDFILE="${HADOOP_PID_DIR}/hadoop-${USER}-${SERVICE}.pid"
LOCKFILE="${HADOOP_PID_DIR}/hadoop-${USER}-${SERVICE}.lock"

export HADOOP_SECONDARYNAMENODE_OPTS="$SECONDARYNAMENODE_OPTS
 -Xloggc:${HDFS_LOG_DIR}/hadoop-${USER}-${SERVICE}-gc.log-`date +'%Y%m%d%H%M'`"

# Add yarn security.audit.log
export HADOOP_SECURITY_LOGGER="${HADOOP_SECURITY_LOGGER:-INFO,DRFAS}"
export HADOOP_SECONDARYNAMENODE_OPTS="$HADOOP_SECONDARYNAMENODE_OPTS -Dhadoop.security.logger=${HADOOP_SECURITY_LOGGER:-INFO,DRFAS}"

start() {
  checkstatus &>/dev/null

  if [[ $RETVAL -eq 0 ]]; then
    echo "$DESC already running"
    RETVAL=0
    return $RETVAL
  fi

  if [[ -e $LOCKFILE ]]; then
    if [[ $RETVAL -ge 3 ]]; then
      echo "$DESC: ignoring $LOCKFILE because process no longer exists"
      rm $LOCKFILE
      rm $PIDFILE
    else
      echo "$DESC cannot start, another process has the lock. rm ${LOCKFILE} to override"
      RETVAL=1
      return $RETVAL
    fi
  fi

  touch $LOCKFILE

  echo -n "Starting $DESC: "

  /usr/local/bin/daemon -i -u ${USER} -c -o ${HADOOP_LOG_DIR}/daemon-${SERVICE}.out -- ${HADOOP_HOME}/sbin/hadoop-daemon.sh start ${SERVICE} $1

  RETVAL=$?

  if [ $RETVAL -ne 0 ]; then
    echo failure
    if [[ -e $PIDFILE ]]; then
        kill `cat $PIDFILE`
    fi

    rm -f $PIDFILE $LOCKFILE
  else
    echo -n 'checking process ...'
    local oom_adj_path tries
    tries=30 # dont let this run forever
    while [ $tries -ge 0 ] ; do
      tries=$((tries - 1))
      sleep 1  # start by waiting for server to come up
      PID=`jps | awk '/^[0-9]* '${SERVICENAME}'$/{print $1}'`
      if [[ -z "$PID" ]] ; then
          continue  # retry until the server comes up
      fi
      # once we have a PID, write the OOM_ADJ
      oom_adj_path="/proc/$PID/oom_adj"
      echo "$OOM_ADJ" > "$oom_adj_path"
      RETVAL=$?
      if [[ $RETVAL -eq 0 ]]; then
          # Verify the write
          oom_adj=`cat "$oom_adj_path"`
          if [[ "$oom_adj" == "$OOM_ADJ" ]] ; then
              echo success
              RETVAL=0
          else
              echo failure
              echo "error: $0: wrote OOM_ADJ file [$oom_adj_path] incorrectly: expected [$OOM_ADJ] got [$oom_adj].  Aborting."
              RETVAL=10
          fi
      else
          echo failure
          echo "error: $0: failed to write OOM_ADJ file [$oom_adj_path].  Aborting."
          RETVAL=11
      fi
      return $RETVAL
    done
    echo failure
    echo "error: $0: timed out waiting for $SERVICE process to start.  Aborting."
    RETVAL=12
  fi

  return $RETVAL
}

stop() {
  checkstatus &>/dev/null

  if [[ $RETVAL -ne 0 ]]; then
    echo "$DESC already stopped"
    rm -f $PIDFILE $LOCKFILE
    RETVAL=0
    return $RETVAL
  fi

  echo -n "Stopping $DESC: "

  /usr/local/bin/daemon -i -u ${USER} ${HADOOP_HOME}/sbin/hadoop-daemon.sh stop ${SERVICE}

  RETVAL=$?

  echo -n "exitcode $RETVAL ... checking process "
  # make sure the server actually stopped, and force it if necessary:
  local tries
  tries=12 # dont run forever
  while [[ $tries -ge 0 ]] ; do
    tries=$((tries - 1))
    sleep 5
    ps -p $PID > /dev/null
    if [[ $? -ne 0 ]] ; then
      echo success
      rm -f $PIDFILE $LOCKFILE
      return $((RETVAL=0))
    else
      echo -n "."
    fi
  done
  echo failure
  echo "$0: forcing stop of service [$SERVICE] process [$PID]."
  echo "$0: manually confirm the result and then rm these 2 files: $PIDFILE $LOCKFILE"
  kill -KILL $PID
  return $((RETVAL=9))
}

restart() {
  stop
  start
}

checkstatus(){
  if [ ! -e $PIDFILE ]; then
    echo "$DESC is not running (no pid file)"
    return $((RETVAL=1))
  fi

  PID=`cat $PIDFILE`

  if [ "${PID}x" == "x" ]; then
     echo "$DESC is not running (no PID in $PIDFILE )"
     return $((RETVAL=2))
  fi

  ps -p $PID > /dev/null
  if [ $? -ne 0 ]; then
    echo "$DESC is not running (pid $PID not found)"
    return $((RETVAL=3))
  fi

  cmd=`ps -p ${PID} h -o%c`

  if [ "xjava" != "x${cmd}" ]; then
    echo "$DESC is not running (pid $PID not running java)"
    return $((RETVAL=4))
  fi

  echo "$DESC (pid $PID) is running"
  return $((RETVAL=0))
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    checkstatus
    ;;
  restart)
    restart
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart}"
    exit 1
esac

exit $RETVAL
